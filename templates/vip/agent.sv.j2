{%- extends "generic_class.sv.j2" -%}

{%- block class_vars %}
{%- set class_type = "class" %}
{%- set class_name = vip.name ~ "_agent" %}
{%- set class_extends = "extends uvm_agent" %}
{%- set class_factory = class_name %}
{%- endblock class_vars %}

{% block class_members -%}
  uvm_analysis_port #({{ vip.name }}_tx) analysis_port;

  {{ vip.name }}_config       m_config;
  {{ vip.name }}_sequencer_t  m_sequencer;
  {{ vip.name }}_driver       m_driver;
  {{ vip.name }}_monitor      m_monitor;

  local int m_is_active = -1;
{%- endblock class_members %}

{% block class_functions_signatures -%}
  extern function new(string name, uvm_component parent);

  extern function void build_phase(uvm_phase phase);
  extern function void connect_phase(uvm_phase phase);
  extern function uvm_active_passive_enum get_is_active();
{%- endblock class_functions_signatures %}

{% block post_class_def -%}
function  {{ class_name }}::new(string name, uvm_component parent);
  super.new(name, parent);
  analysis_port = new("analysis_port", this);
endfunction: new

function void {{ class_name }}::build_phase(uvm_phase phase);
  if (!uvm_config_db #({{ vip.name }}_config)::get(this, "", "config", m_config))
    `uvm_fatal(get_type_name(), "{{ vip.name }} config not found")

  m_monitor = {{ vip.name }}_monitor::type_id::create("m_monitor", this);

  if (get_is_active() == UVM_ACTIVE)
  begin
    m_driver = {{ vip.name }}_driver::type_id::create("m_driver", this);
    m_sequencer = {{ vip.name }}_sequencer_t::type_id::create("m_sequencer", this);
  end
endfunction: build_phase

function void {{ class_name }}::connect_phase(uvm_phase phase);
  if (m_config.vif == null)
    `uvm_warning(get_type_name(), "{{ vip.name }} virtual interface is not set!")

  m_monitor.vif = m_config.vif;
  m_monitor.m_config = m_config;
  m_monitor.analysis_port.connect(analysis_port);

  if (get_is_active() == UVM_ACTIVE)
  begin
    m_driver.seq_item_port.connect(m_sequencer.seq_item_export);
    m_driver.vif = m_config.vif;
    m_driver.m_config = m_config;
  end
endfunction: connect_phase

function uvm_active_passive_enum {{ class_name }}::get_is_active();
  if (m_is_active == -1)
  begin
    if (uvm_config_db#(uvm_bitstream_t)::get(this, "", "is_active", m_is_active))
    begin
      if (m_is_active != m_config.is_active)
        `uvm_warning(get_type_name(), "is_active field in config_db conflicts with config object")
    end
    else
      m_is_active = m_config.is_active;
  end
  return uvm_active_passive_enum'(m_is_active);
endfunction: get_is_active
{%- endblock post_class_def %}

