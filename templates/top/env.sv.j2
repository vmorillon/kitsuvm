{%- extends "generic_class.sv.j2" -%}
{% import "top/utils/instance.sv.j2" as inst %}

{%- block class_vars %}
{%- set class_type = "class" %}
{%- set class_name = top.name ~ "_env" %}
{%- set class_extends = "extends uvm_env" %}
{%- set class_factory = class_name %}
{%- endblock class_vars %}

{% block class_members -%}
  {{ top.name }}_config m_config;
  {{ top.name }}_scoreboard m_scoreboard;

  {% for i in instances %}
  {{ i.vip_name }}_config {{ inst::instance_name_k(instance = i, kind = "config") }};
  {{ i.vip_name }}_agent {{ inst::instance_name_k(instance = i, kind = "agent") }};
  {{ i.vip_name }}_coverage {{ inst::instance_name_k(instance = i, kind = "coverage") }};
  {% endfor %}
{%- endblock class_members %}

{% block class_functions_signatures -%}
  extern function new(string name, uvm_component parent);

  extern function void build_phase(uvm_phase phase);
  extern function void connect_phase(uvm_phase phase);
  extern function void end_of_elaboration_phase(uvm_phase phase);
  extern task run_phase(uvm_phase phase);
{%- endblock class_functions_signatures %}

{% block post_class_def -%}
function {{ class_name }}::new(string name, uvm_component parent);
  super.new(name, parent);
endfunction: new

function void {{ class_name }}::build_phase(uvm_phase phase);
  `uvm_info(get_type_name(), "In build_phase", UVM_HIGH)

  if (!uvm_config_db #({{ top.name }}_config)::get(this, "", "config", m_config))
    `uvm_fatal(get_type_name(), "Unable to get {{ top.name }}_config")

  uvm_config_db #({{ top.name }}_config)::set(this, "m_scoreboard", "config", m_config);
  m_scoreboard = {{ top.name }}_scoreboard::type_id::create("m_scoreboard",this);

  {% for i in instances %}
  {{ inst::instance_name_k(instance = i, kind = "config") }} = m_config.{{ inst::instance_name_k(instance = i, kind = "config") }};
  uvm_config_db #({{ i.vip_name }}_config)::set(this, "{{ inst::instance_name_k(instance = i, kind = "agent") }}", "config", {{ inst::instance_name_k(instance = i, kind = "config") }});
  if ({{ inst::instance_name_k(instance = i, kind = "config") }}.is_active == UVM_ACTIVE )
    uvm_config_db #({{ i.vip_name}}_config)::set(this, "{{ inst::instance_name_k(instance = i, kind = "agent") }}.m_sequencer", "config", {{ inst::instance_name_k(instance = i, kind = "config") }});
  uvm_config_db #({{ i.vip_name }}_config)::set(this, "{{ inst::instance_name_k(instance = i, kind = "coverage") }}", "config", {{ inst::instance_name_k(instance = i, kind = "config") }});

  {{ inst::instance_name_k(instance = i, kind = "agent") }} = {{ i.vip_name }}_agent::type_id::create("{{ inst::instance_name_k(instance = i, kind = "agent") }}", this);
  {{ inst::instance_name_k(instance = i, kind = "coverage") }} = {{ i.vip_name }}_coverage::type_id::create("{{ inst::instance_name_k(instance = i, kind = "coverage") }}", this);
  {% endfor %}
endfunction: build_phase

function void {{ class_name }}::connect_phase(uvm_phase phase);
  `uvm_info(get_type_name(), "In connect_phase", UVM_HIGH)

  {% for i in instances %}
  {{ inst::instance_name_k(instance = i, kind = "agent") }}.analysis_port.connect({{ inst::instance_name_k(instance = i, kind = "coverage") }}.analysis_export);
  {{ inst::instance_name_k(instance = i, kind = "agent") }}.analysis_port.connect(m_scoreboard.{{ inst::instance_name_k(instance = i, kind = "export") }});
  {% endfor %}
endfunction: connect_phase

function void {{ class_name }}::end_of_elaboration_phase(uvm_phase phase);
  uvm_factory factory = uvm_factory::get();
  `uvm_info(get_type_name(), "Information printed from {{ class_name }}::end_of_elaboration_phase method", UVM_MEDIUM)
  `uvm_info(get_type_name(), $sformatf("Verbosity threshold is %d", get_report_verbosity_level()), UVM_MEDIUM)
  uvm_top.print_topology();
  factory.print();
endfunction: end_of_elaboration_phase

task {{ class_name }}::run_phase(uvm_phase phase);
  {{ top.name }}_default_seq vseq;
  vseq = {{ top.name }}_default_seq::type_id::create("vseq");
  vseq.set_item_context(null, null);
  if ( !vseq.randomize() )
    `uvm_fatal(get_type_name(), "Failed to randomize virtual sequence")
  {% for i in instances %}
  vseq.{{ inst::instance_name_k(instance = i, kind = "agent") }} = {{ inst::instance_name_k(instance = i, kind = "agent") }};
  {%- endfor %}

  vseq.m_config = m_config;
  vseq.set_starting_phase(phase);
  vseq.start(null);
endtask: run_phase
{%- endblock post_class_def %}
